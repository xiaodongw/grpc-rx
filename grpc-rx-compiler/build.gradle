apply plugin: "com.google.protobuf"

description = 'The protoc plugin for gRPC rxjava'

buildscript {
  repositories {
    mavenCentral()
    mavenLocal()
  }
  dependencies {
    classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.5"
  }
}

def artifactStagingPath = "$buildDir/artifacts" as File
def String arch = rootProject.hasProperty('targetArch') ? rootProject.targetArch : osdetector.arch

dependencies {
  testCompile project(':grpc-rx-stub')
}

compileTestJava {
  options.compilerArgs += ["-Xlint:-cast"]
}

protobuf {
  generatedFilesBaseDir = "$projectDir/gen"
  protoc {
    if (project.hasProperty('protoc')) {
      path = project.protoc
    } else {
      artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
  }
  plugins {
    grpc {
      path = rxjavaPluginPath
    }
  }
  generateProtoTasks {
    all().each { task ->
      task.dependsOn 'buildPlugin'
      task.inputs.file rxjavaPluginPath
    }
    ofSourceSet('test')*.plugins {
      grpc {
        option 'write_input=true'
        //option 'write_output=true'
      }
    }
  }
}

sourceSets {
  test {
    java {
      srcDir "${protobuf.generatedFilesBaseDir}/test/java"
      srcDir "${protobuf.generatedFilesBaseDir}/test/grpc"
    }
  }
}

compileTestJava {
  options.compilerArgs += ["-Xlint:-cast"]
}

task buildPlugin(type: Exec) {
  commandLine 'go', 'build', '-o', rxjavaPluginPath, 'src/main/go/main.go'
}

task buildArtifacts(type: Copy) {
  dependsOn 'buildPlugin'
  from("$buildDir/exe") {
    if (osdetector.os != 'windows') {
      rename 'protoc-gen-grpc-rxjava', '$0.exe'
    }
  }
  into artifactStagingPath
}

archivesBaseName = "$protocPluginBaseName"

artifacts {
  archives("$artifactStagingPath/rxjava_plugin/${protocPluginBaseName}.exe" as File) {
    classifier osdetector.os + "-" + arch
    type "exe"
    extension "exe"
    builtBy buildArtifacts
  }
}

// Exe files are skipped by Maven by default. Override it.
// Also skip jar files that is generated by the java plugin.
[
  install.repositories.mavenInstaller,
  uploadArchives.repositories.mavenDeployer,
]*.setFilter { artifact, file ->
  !(file.getName().endsWith('jar') || file.getName().endsWith('jar.asc'))
}

[
  uploadArchives.repositories.mavenDeployer,
]*.beforeDeployment {
  def ret = exec {
    executable 'bash'
    args 'check-artifact.sh', osdetector.os, arch
  }
  if (ret.exitValue != 0) {
    throw new GradleException("check-artifact.sh exited with " + ret.exitValue)
  }
}

[
  install.repositories.mavenInstaller,
  uploadArchives.repositories.mavenDeployer,
]*.pom*.whenConfigured { pom ->
  pom.project {
    // This isn't any sort of Java archive artifact, and OSSRH doesn't enforce
    // javadoc for 'pom' packages. 'exe' would be a more appropriate packaging
    // value, but it isn't clear how that will be interpreted. In addition,
    // 'pom' is typically the value used when building an exe with Maven.
    packaging = "pom"
  }
}


def configureTestTask(Task task, String dep, String extraPackage) {
  test.dependsOn task
  task.dependsOn "generateTest${dep}Proto"
  if (osdetector.os != 'windows') {
    task.executable "diff"
  } else {
    task.executable "fc"
  }
  // File isn't found on Windows if last slash is forward-slash
  def slash = System.getProperty("file.separator")
  task.args "$projectDir/gen/test${dep}/grpc/io/grpc/testing/integration${extraPackage}${slash}TestServiceGrpcRx.java",
    "$projectDir/src/test${dep}/golden/TestServiceGrpcRx.java.txt"
}

task testGolden(type: Exec)
configureTestTask(testGolden, '', '')
